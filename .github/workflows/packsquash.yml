- name: PackSquash
  # You may pin to the exact commit or the version.
  # uses: ComunidadAylas/PackSquash-action@cdeba7365a1491b436b1a9c381d63b5ee6c27f2e
  uses: ComunidadAylas/PackSquash-action@v3.0.0
  with:
    # Relative path from the repository root to the pack directory.
    path: # optional, default is .
    # The system identifier PackSquash will use to generate cryptographic secrets. Unless you know what you are doing, it is recommended to leave this parameter unset, as doing so will let the action generate and use a suitable system identifier automatically.
    system_id: # optional, default is 
    # The PackSquash version the action will use. Please note that too old or too new versions may be incompatible or not properly supported by the action.
    packsquash_version: # optional, default is v0.3.1
    # Use the specified options file instead of generating one with this action. Use this if you already have an options file you want to use with this action, or the options this action offers are not enough for your needs. Please note that the action relies on PackSquash generating an output file at a fixed location, so it will ignore the value of the output_file_path option and it should be removed from the options file.
    options_file: # optional, default is 
    # The GitHub API authentication token that will be used for operations that may require authentication.
    token: # optional, default is ${{ github.token }}
    # The revision of the cache the action uses internally. You should only need to change this revision if you want the action to not reuse any cached information, like the system identifier, or want to isolate jobs from each other due to undesired interferences between them. This will render any previously generated ZIP file unusable for speed optimizations unless you manage the system identifier yourself.
    action_cache_revision: # optional, default is 
    # The name of the workflow artifact containing the generated ZIP file that the action will upload. Later steps in the workflow will be able to download it by this name. Changing this may be needed in complex workflows, where the action runs several times.
    artifact_name: # optional, default is Optimized pack
    # If true, the action will instruct PackSquash to use emojis in the logs it generates, which look prettier. Otherwise, plain ASCII decoration characters will be used instead.
    show_emoji_in_packsquash_logs: # optional, default is true
    # If true, the action will instruct PackSquash to color the log messages it generates, which looks prettier. Otherwise, the messages will not be colored.
    enable_color_in_packsquash_logs: # optional, default is true
    # If true, this parameter makes PackSquash try to compress files whose contents are already compressed just before adding them to the generated ZIP file after all the file type-specific optimizations have been applied.
    recompress_compressed_files: # optional, default is false
    # The number of Zopfli compression iterations that PackSquash will do when compressing a file of magnitude 1 MiB just before it is added to the generated ZIP file. This affects files whose contents are not already compressed, or all files if recompress_compressed_files is enabled.
    zip_compression_iterations: # optional, default is 20
    # Sets whether PackSquash will automatically deduce an appropriate set of Minecraft quirks that affect how pack files can be optimized, by looking at the pack files, or not. If automatic quirk detection is enabled (set to true), any other parameters for working around specific quirks will be ignored. Enabling this feature implies validating the pack metadata file, even if validate_pack_metadata_file is set to false.
    automatic_minecraft_quirks_detection: # optional, default is true
    # This parameter sets whether a quirk with grayscale images will be worked around. You should only change the default value if needed. Please read https://github.com/ComunidadAylas/PackSquash/wiki/Options-files#work_around_minecraft_quirks for more details.
    work_around_grayscale_images_gamma_miscorrection_quirk: # optional, default is false
    # This parameter sets whether a quirk with how older Minecraft versions read ZIP files will be worked around, that may render them unable to read the ZIP files PackSquash generates when `zip_spec_conformance_level` is set to `disregard`. You should only change the default value if needed. Please read https://github.com/ComunidadAylas/PackSquash/wiki/Options-files#work_around_minecraft_quirks for more details.
    work_around_java8_zip_parsing_quirk: # optional, default is false
    # This parameter sets whether a quirk with how older Minecraft versions parse shield and banner textures in certain formats will be worked around. You should only change the default value if needed. Please read https://github.com/ComunidadAylas/PackSquash/wiki/Options-files#work_around_minecraft_quirks for more details.
    work_around_restrictive_banner_layer_texture_format_check_quirk: # optional, default is false
    # This parameter sets whether a quirk with how Minecraft parses eye layer textures with transparent pixels will be worked around. You should only change the default value if needed. Please read https://github.com/ComunidadAylas/PackSquash/wiki/Options-files#work_around_minecraft_quirks for more details.
    work_around_bad_entity_eye_layer_texture_transparency_blending_quirk: # optional, default is false
    # If true, PackSquash will attempt to automatically deduce the appropriate set of pack files to include in the generated ZIP by checking what Minecraft versions it targets, according to the pack format version in the pack.mcmeta file. Otherwise, PackSquash will include any file it recognizes no matter what. Enabling this feature implies validating the pack metadata file, even if validate_pack_metadata_file is set to false.
    automatic_asset_types_mask_detection: # optional, default is true
    # Adds support for .properties files. From PackSquash v0.3.0 onwards, it also adds .jpm and .jem for proper Custom Entity Models support. From PackSquash v0.3.1 onwards, the extensions .jpmc and .jemc are accepted to indicate the usage of comments.
    allow_optifine_mod: true # optional, default is false
    # Adds support for Blockbench modded entity model projects for custom train models in the mtr asset namespace, stored as .bbmodel or .bbmodelc files.
    allow_mtr3_mod: # optional, default is false
    # If true, the pack.png file that contains the resource pack icon will not be included in the result ZIP file. As of Minecraft 1.16.3, the icon of server resource packs is not displayed, so this optimization does not have any drawbacks in this case.
    skip_pack_icon: # optional, default is false
    # If true, the pack metadata file, pack.mcmeta, will be parsed and validated for errors. Otherwise, it will not be validated, unless other options imply doing so. Validating the pack metadata is usually a good thing because Minecraft requires it to load a pack.
    validate_pack_metadata_file: # optional, default is true
    # If true, PackSquash will skip and not print progress messages for system (i.e. clearly not for use with Minecraft) and hidden (i.e. whose name starts with a dot) files and folders.
    ignore_system_and_hidden_files: # optional, default is true
    # This parameter lets you choose the ZIP specification conformance level that is most suitable to your pack and situation. Please read https://github.com/ComunidadAylas/PackSquash/wiki/Options-files#zip_spec_conformance_level for more information.
    zip_spec_conformance_level: disregard # optional, default is high
    # If zip_spec_conformance_level is set to disregard, enabling this parameter will add more protections against inspecting, extracting or tampering with the generated ZIP file that will slightly increase its size.
    size_increasing_zip_obfuscation: # optional, default is false
    # If zip_spec_conformance_level is set to disregard, this parameter sets the approximate probability for each internal generated ZIP file structure to be stored in a way that favors additional discretion of the fact that protection techniques were used, as opposed to a way that favors increased compressibility of the result ZIP file.
    percentage_of_zip_structures_tuned_for_obfuscation_discretion: # optional, default is 0
    # This parameter controls whether PackSquash will refuse to store the metadata needed to reuse previously generated ZIP files, and likewise not expect such data if the output ZIP file already exists, thus not reusing its contents to speed up the process in any way, no matter what the zip_spec_conformance_level is.
    never_store_squash_times: # optional, default is false
    # When true, Ogg files will be reencoded again, to apply resampling, channel mixing, pitch shifting and bitrate reduction, which may degrade their quality, but commonly saves quite a bit of space.
    transcode_ogg: false # optional, default is true
    # Specifies the sampling frequency (i.e. number of samples per second) to which the input audio files will be resampled, in Hertz (Hz).
    audio_sampling_frequency: # optional, default is 32000
    # Sets the in-game pitch shift coefficient that will result in the audio files being played back at the original speed, affecting the perceived pitch and tempo.
    target_audio_pitch: # optional, default is 1.0
    # Specifies the minimum bits per second (bps or bit/s) that the Ogg encoder will try to use to represent audio signals in audio files.
    minimum_audio_bitrate: # optional, default is 40000
    # Specifies the maximum bits per second (bps or bit/s) that the Ogg encoder will try to use to represent audio signals in audio files.
    maximum_audio_bitrate: # optional, default is 96000
    # When true, JSON files will be minified, which removes comments and unnecessary white space, to improve space savings.
    minify_json_files: # optional, default is true
    # If this parameter is set to true, PackSquash will delete known-superfluous keys from JSON files, like credits added by pack authoring tools, that are completely ignored by Minecraft.
    delete_bloat_json_keys: # optional, default is true
    # If true, PackSquash will allow comments in JSON files whose usual extension does not end with an extra c letter, which explicitly marks the file as having an extended JSON format that may contain comments. If false, comments will only be allowed in JSON files with those specific extensions: .jsonc, .mcmetac, etc.
    always_allow_json_comments: # optional, default is true
    # Sets the number of Zopfli compression iterations that PackSquash will do to compress raw pixel data in image files that amounts to a magnitude of 1 MiB.
    image_data_compression_iterations: # optional, default is 5
    # Sets the color quantization target for image files, which affects whether the lossy color quantization process is performed and how.
    image_color_quantization_target: # optional, default is auto
    # Sets the level of dithering that will be applied when quantizing colors in image files. This option has no effect if color_quantization_target is not set to perform color quantization.
    image_color_quantization_dithering_level: # optional, default is 0.85
    # Sets the maximum width and height of the image files that PackSquash will accept without throwing an error. Please read https://github.com/ComunidadAylas/PackSquash/wiki/Options-files#maximum_width_and_height for more details about the rationale of this option.
    maximum_image_width_and_height: # optional, default is 8192
    # If true, this parameter prevents the color values of completely transparent pixels in image files from being changed in order to achieve better compression.
    skip_image_alpha_optimizations: # optional, default is false
    # When true, the source code of shaders will be minified, which removes comments and unnecessary white space, to improve space savings.
    minify_shaders: # optional, default is true
    # If true, the legacy language files will be minified: empty lines and comments will be removed. This saves space and improves parsing performance. If false, those files will still be validated for errors but left as they are.
    minify_legacy_language_files: # optional, default is true
    # If true, the BOM in the first line of legacy language files will be stripped. This usually saves space and avoids user confusion. When false, this behavior is disabled, which may be necessary if the pack relies on the BOM character to be present in any of these files.
    strip_legacy_language_files_bom: # optional, default is true
    # If true, the command function files will be minified: empty lines and comments will be removed. This saves space and improves parsing performance. If false, the files will still be validated for errors but left as they are.
    minify_command_function_files: # optional, default is true
    # When true, and if the appropriate mod support is enabled, properties files will be minified, which removes comments and unnecessary white space, to improve space savings.
    minify_properties_files: # optional, default is true
    # A list of file path glob patterns to always include in the generated ZIP file, even if PackSquash does not recognize such files as assets. These files are copied as-is, but not optimized in any specific way, so this option does not substitute proper PackSquash support for assets used by the game. Please read https://github.com/ComunidadAylas/PackSquash/wiki/Options-files#custom-files for more details about the custom files feature.
    force_include_files: # optional, default is 
